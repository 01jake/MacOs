@page "/update/{PersonajeId:int}"
@inject NavigationManager NavigationManager
@using Gym.Shared.Modelos
@inject GymBlazor.Client.Servicios.ClienteServicio ClienteServicio
@inject NavigationManager Navigation

<h3>Update</h3>
@if (ClienteEditar == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="ClienteEditar" OnValidSubmit="ActualizarCliente">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <MudTextField @bind-Value="ClienteEditar.Nombre" Label="Nombre" Typo="Typo.h5"></MudTextField>

        </div>

        <div class="mb-3">
            <MudTextField @bind-Value="ClienteEditar.Apellido" Label="Apellido" Typo="Typo.h5"></MudTextField>
        </div>

        <div class="mb-3">
            <MudTextField @bind-Value="ClienteEditar.Email" Label="Email " Typo="Typo.h5"></MudTextField>
        </div>

        <div class="mb-3">
            <MudTextField @bind-Value="ClienteEditar.Telefono"  Label="Telefono" Typo="Typo.h5"></MudTextField>
        </div>

        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
        <button class="btn btn-primary" @onclick="ActualizarCliente">Save</button>
    </EditForm>
}
@code {
    [Parameter]
    public int ClienteId { get; set; }

    private Cliente ClienteEditar = new();

    protected override async Task OnInitializedAsync()
    {
        var personajes = await ClienteServicio.ObtenerCliente();
        ClienteEditar = personajes.FirstOrDefault(p => p.Id == ClienteId);
    }


    private async Task ActualizarCliente()
    {

        await ClienteServicio.ActualizarCliente(ClienteEditar);


        Navigation.NavigateTo("/PrincipalCliente");
    }

    private void Cancel()
    {

        Navigation.NavigateTo("/PrincipalCliente");
    }
}
